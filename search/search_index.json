{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RdfCrate","text":"<p>RO-Crate builder that uses RDF concepts.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>RO-Crate is stored as JSON-LD, which seems user-friendly to people who are used to working with JSON. Unfortunately, once you get beyond the basics, JSON-LD is actually quite complex. It has special keys like <code>@context</code>, <code>@id</code> and <code>@type</code>, it has multiple ways to represent relationships, it has multiple forms like framed, flattened and expanded, and it uses URL prefixes. At this level, it becomes easier to just embrace RDF concepts directly, where everything is just a triple of subject (the thing being described), predicate (the relationship) and object (the value), that's it!</p> <p>RdfCrate provide some helpful utilities for creating RO-Crates on top of RDF, but it never tries to disguise it.</p>"},{"location":"#example","title":"Example","text":"<p>Let's say you have a directory with one file in it, which you want to document. Here's how you could make an RO-Crate using RdfCrate:</p> <p><pre><code>from rdfcrate import AttachedCrate, uris\nfrom rdflib import Literal\n\ncrate = AttachedCrate(\"/path/to/directory\")\ncrate.register_file(\"photo.jpg\", {\n    uris.name: Literal(\"Cool cat photo\")\n})\ncrate.compile()\n</code></pre> <pre><code>{\n  \"@context\": \"https://w3id.org/ro/crate/1.1/context\",\n  \"@graph\": [\n    {\n      \"@id\": \"photo.jpg\",\n      \"@type\": \"File\",\n      \"encodingFormat\": \"image/jpeg\",\n      \"name\": \"Cool cat photo\"\n    },\n    {\n      \"@id\": \"ro-crate-metadata.json\",\n      \"@type\": \"File\",\n      \"about\": {\n        \"@id\": \".\"\n      },\n      \"conformsTo\": {\n        \"@id\": \"https://w3id.org/ro/crate/1.1\"\n      },\n      \"encodingFormat\": \"application/json\"\n    },\n    {\n      \"@id\": \".\",\n      \"@type\": \"Dataset\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/","title":"API","text":""},{"location":"api/#rdfcrate.wrapper.RoCrate","title":"<code>rdfcrate.wrapper.RoCrate</code>  <code>dataclass</code>","text":"<p>Abstract class containing common functionality for both attached and detached RO-Crates</p>"},{"location":"api/#rdfcrate.wrapper.RoCrate.add_entity","title":"<code>add_entity(id: IdentifiedNode, type: URIRef, attrs: Attributes)</code>","text":"<p>Adds any type of entity to the crate</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>IdentifiedNode</code> <p>ID of the entity being added</p> required <code>type</code> <code>URIRef</code> <p>Type of the entity being added</p> required <code>attrs</code> <code>Attributes</code> <p>Attributes of the entity being added</p> required Example <pre><code>from rdflib import BNode,\nfrom rdfcrate import uris\n\ncrate.add_entity(BNode(), uris.Person, {uris.name: Literal(\"Alice\")})\n</code></pre>"},{"location":"api/#rdfcrate.wrapper.RoCrate.add_metadata","title":"<code>add_metadata(entity: IdentifiedNode, attrs: Attributes)</code>","text":"<p>Add metadata for an existing entity.</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>IdentifiedNode</code> <p>ID of the entity being described</p> required <code>attrs</code> <code>Attributes</code> <p>Attributes of the entity being described</p> required"},{"location":"api/#rdfcrate.wrapper.RoCrate.compile","title":"<code>compile() -&gt; str</code>","text":"<p>Compiles the RO-Crate to a JSON-LD string</p>"},{"location":"api/#rdfcrate.wrapper.RoCrate.register_dir","title":"<code>register_dir(path: str, attrs: Attributes = {}, **kwargs: Any)</code>","text":"<p>Adds metadata for a directory</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the directory, which must be within the crate root</p> required <code>attrs</code> <code>Attributes</code> <p>Attributes used to describe the <code>Dataset</code> entity</p> <code>{}</code>"},{"location":"api/#rdfcrate.wrapper.RoCrate.register_file","title":"<code>register_file(path: str, attrs: Attributes = {}, guess_mime: bool = True, **kwargs: Any)</code>","text":"<p>Adds file metadata to the crate</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path or URL to the file being added</p> required <code>attrs</code> <code>Attributes</code> <p>Attributes used to describe the <code>File</code> entity</p> <code>{}</code> <code>guess_mime</code> <code>bool</code> <p>If true, automatically guess and document the MIME type of the file based on its extension</p> <code>True</code>"},{"location":"api/#rdfcrate.AttachedCrate","title":"<code>rdfcrate.AttachedCrate</code>  <code>dataclass</code>","text":"<p>               Bases: <code>RoCrate</code></p> <p>See https://www.researchobject.org/ro-crate/specification/1.2-DRAFT/structure#attached-ro-crate</p>"},{"location":"api/#rdfcrate.AttachedCrate.register_dir","title":"<code>register_dir(path: Path | str, attrs: Attributes = {}, recursive: bool = False, **kwargs: Any)</code>","text":"<p>See <code>RoCrate.register_dir</code>.</p> <p>Parameters:</p> Name Type Description Default <code>recursive</code> <code>bool</code> <p>If true, register all files and subdirectories in the directory. The automatically created children will only have default metadata. You can use <code>add_metadata</code> to document them more comprehensively.</p> <code>False</code>"},{"location":"api/#rdfcrate.AttachedCrate.register_file","title":"<code>register_file(path: Path | str, attrs: Attributes = {}, guess_mime: bool = True, add_size: bool = False, **kwargs: Any)</code>","text":"<p>See <code>RoCrate.register_file</code>.</p> <p>Parameters:</p> Name Type Description Default <code>add_size</code> <code>bool</code> <p>If true, automatically add the size of the file to the metadata</p> <code>False</code>"},{"location":"api/#rdfcrate.AttachedCrate.write","title":"<code>write()</code>","text":"<p>Writes the RO-Crate to <code>ro-crate-metadata.json</code></p>"},{"location":"guide/","title":"Guide","text":""}]}